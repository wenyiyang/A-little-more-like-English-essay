// Name: Wenyi Yang
// USC loginid: wenyiyan
// CS 455 PA4
// Spring 2015

import java.util.Random;
import java.util.HashMap;
import java.util.Iterator;
import java.util.ArrayList;

/*
 * RandomTextGenerator Class
 * generate word according to a prefix and its successors.
 */
public class RandomTextGenerator {
	/*
	 * Representation invariant:
	 * sourceTextMap stores all possible Prefixes and their successors of sourceFile.
	 */
	private HashMap<Prefix, ArrayList<String>> sourceTextMap;
	// a hashMap stores all possible Prefixes and their successors of sourceFile.
	private Random generator;
	// a random generator used to generate random number.
	
	/*
	 * construct a RandomTextGenerator
	 * @param a hashMap stores all possible Prefixes and their successors of sourceFile.
	 * @param debugSwitch a string used to control debugging mode.
	 */
	public RandomTextGenerator(HashMap<Prefix, ArrayList<String>> sourceTextMap, String debugSwitch) {
		this.sourceTextMap = new HashMap<Prefix, ArrayList<String>>();
		if(debugSwitch.equals(GenText.DEBUGGING_FLAG)) {
			generator = new Random(1);
		}
		else {
			generator = new Random();
		}
		Iterator<Prefix> iter = sourceTextMap.keySet().iterator();
        while(iter.hasNext()) {
            Prefix copyPrefix = iter.next();
            ArrayList<String> successor = sourceTextMap.get(copyPrefix);
            this.sourceTextMap.put(copyPrefix, successor);
	    }
	}
	
	/*
	 * generate a word according to a prefix and its successors randomly.
	 * @param prefix word generated by the method must follows the prefix.
	 * @return a word should be writen in sourceFile.
	 */
	public String genText(Prefix prefix) {
		ArrayList<String> successor = new ArrayList<String>();
		successor = sourceTextMap.get(prefix);
		int i = generator.nextInt(successor.size());
		return successor.get(i);
	}

}
